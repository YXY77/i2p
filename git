Title: ##### Getting to Grips with Git
Author: --Jon Reades--
Theme: **casa notes**
Palette: Purple
Size: Wide
---
Layout: Title
# Getting to Grips with Git

^ You will need two things to get started:

^ 1. `git` installed on *your* computer: [git-scm.com/downloads](https://git-scm.com/downloads)
^ 2. A GitHub account: [github.com](https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home)

---
## Why You Need It

![Versions](img/phd101212s.gif) 

^ Version control has been around longer than the Internet. Broadly, it was designed to achieve three things:
^ 1. A record of and and all edits made to a file containing code.
^ 2. A means of allowing developers to share edits with one another.
^ 3. A way of reconciling conflicts when two (or more) developers edited the same code.
---
### However

Although we naturally connect version control to coding, you can use it **anywhere** that you have files that are changing (*hint:* essays, notes, projects, assessments, code...) and need/want to track them. 

**Bonus:** you *also* gain free backups if some part of your version control system is on a different computer!

---
## How It Works

The **natural way** to think about managing versions of a document is to have a *master* copy **somewhere**. Everyone asks the server for the master copy, makes some changes, and then checks those changes back in.

This is not how Git works.
---
## How Git Works

Git is **distributed**. You could call it peer-to-peer, meaning that *every* computer where git is installed is **its own server** and has its own *master copy*. 

So every computer has a **full history** of a file or project that been added to Git.

In order to make this **useful**, you need ways to synchronise changes between computers that all think *they're* right.
---
## GitHub

GitHub is **nothing special** to Git, just another server with which to negotiate changes. Do *not* think of GitHub as the 'master' copy. There isn't one. 
---
Layout: SectionTitle
## Using Git
---
### Getting Started

| Term | Means |
| :--- | :---- |
| Repository (Repo) | A project or achive stored in Git. |
| init | To create a new repo. |
| clone | To make a full copy of a repo somewhere else. |

For example:
```bash
mkdir i2p
cd i2p
git init
```
Or: `git clone https://github.com/jreades/i2p.git`

---
### Working on a `File`

| Term | Means |
| :--- | :---- |
| add  | Add a file to a repo. |
| Move (mv) | Move/Rename a file in a repo. |
| Remove (rm) | Remove a file from a repo. |

For example:
```bash
git add README.md
git mv README.md fileA.md
git rm fileA.md
```
But no one *else* knows about these changes yet!

---
### Looking at the History

| Term | Means |
| :--- | :---- |
| diff | Show changes between commits. |
| status | Show status of files in repo. |
| log | Show history of commits. |

For example:
```bash
git status
```

---
### Working on a Project or File
| Term | Means |
| :--- | :---- |
| commit | To record changes to the repo. |
| branch | Create or delete branches. |
| checkout | Jump to a different branch. |

For example:
```bash
git commit -m "Moved and then deleted README file."
```
---
### Collaborating on a Project

| Term | Means |
| :--- | :---- |
| pull | To request changes to a repo *from* another computer. |
| push | To send your changes to a repo *to* another computer. |

For example:
```
git push
```

---
## Consequences

All changes are **local** until you `push` them. 

If you forget to `push` your changes (e.g. to GitHub) then you are **not backed up** if your computer dies.

---
## This is *not* easy

![XKCD Comic About Git](img/xkcd-git.png)

[Source](https://xkcd.com/1597/)

---
### Resources

- [Understanding Git (Part 1) -- Explain it Like I'm Five](https://hackernoon.com/understanding-git-fcffd87c15a3)
- [Trying Git](https://try.github.io)
- [Visualising Git](http://git-school.github.io/visualizing-git/)
- [Git Novice](http://swcarpentry.github.io/git-novice/)
- [Andy's R-focussed Tutorial](https://andrewmaclachlan.github.io/CASA0005repo/git-github-and-rmarkdown.html#set-up-your-github)

^ I now have everything in Git repos: articles, research, presentations, modules... the uses are basically endless once you start using Markdown heavily (even if you don't do much coding).
